generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model otp {
  id          Int      @id @default(autoincrement())
  userId      Int
  otp         String
  createdDate DateTime
  expireDate  DateTime
  isActive    Boolean  @default(true)
}

model categories {
  id        Int        @id @default(autoincrement())
  title     String
  createdAt DateTime   @default(now())
  updatedAt DateTime?
  articles  articles[]
}

model articles {
  id           Int        @id @default(autoincrement())
  title        String
  createAt     DateTime   @default(now())
  details      String
  categoriesId Int
  category     categories @relation(fields: [categoriesId], references: [id])
}

model administrators {
  id             Int       @id @unique(map: "administrators_id_idx") @default(autoincrement())
  userid         String    @db.VarChar(128)
  firstname      String?   @db.VarChar(100)
  lastname       String?   @db.VarChar(100)
  emailid        String?   @db.VarChar(100)
  gender         String?   @db.Char(1)
  dob            DateTime? @db.Date
  mobile         String?   @db.VarChar(50)
  registrationon DateTime  @db.Timestamp(6)
  lastactivityby Int?
  lastactivityon DateTime  @default(now()) @db.Timestamp(6)
  isactive       Boolean   @default(true)
  isdeleted      Boolean   @default(false)

  @@index([userid])
}

model customers {
  id             Int       @id @unique(map: "customers_id_idx") @default(autoincrement())
  userid         Int?
  firstname      String?   @db.VarChar(100)
  lastname       String?   @db.VarChar(100)
  emailid        String?   @db.VarChar(100)
  gender         String?   @db.Char(1)
  dob            DateTime? @db.Date
  mobile         String?   @db.VarChar(50)
  registrationon DateTime  @default(now()) @db.Timestamp(6)
  lastactivityby Int?
  lastactivityon DateTime  @default(now()) @db.Timestamp(6)
  isactive       Boolean   @default(true)
  isdeleted      Boolean   @default(false)
}

model roles {
  id        Int         @id(map: "pk_roles") @unique(map: "roles_id_idx") @default(autoincrement())
  name      String      @unique(map: "roles_name_idx") @db.VarChar
  userroles userroles[]
}

model userroles {
  userid Int
  roleid Int
  roles  roles @relation(fields: [roleid], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "userroles_RoleId_fkey")
  users  users @relation(fields: [userid], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "userroles_UserId_fkey")

  @@id([userid, roleid], map: "pk_userroles")
  @@unique([userid, roleid], map: "userroles_userid_idx")
}

model users {
  id            Int         @id(map: "pk_users") @unique(map: "users_id_idx") @default(autoincrement())
  passwordhash  String?     @db.VarChar
  securitystamp String?     @db.VarChar
  username      String      @unique(map: "uq_users") @db.VarChar
  userroles     userroles[]

  @@index([username])
}
